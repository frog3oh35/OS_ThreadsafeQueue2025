✔️ 오늘 공부한 것 정리...

✔️ 250531
- 자료구조 리마인드하면서 내가 모르는거 1부터 배우기
- init() 구현

1. qtype.h 이해하기

큐를 이루는 설계도
교수님께서 써주신 기본 구조

필요한 만큼 필드 추가 (이건 해봐야 알 듯)

* Item
큐에 넣을 테이터 Key(우선순위) + value(값)

* Reply
함수 반환값 : 성공 여부, 어떤 item 반환했는지

* Node
큐의 하나의 칸 (노드)... Item + 다음 노트 가리키는 포인터

* Queue
큐 전체. head와 tail 포인터로 앞뒤 추적


--------------------------------------------------


2. qtype.h 헤드파일 하나하나 이해해보자


typedef unsigned int Key;
//값이 클수록 높은 우선순위
typedef void* Value;
-> value는 실제 값, 어떤 타입이든 가능하게 void

---

typedef struct {
	Key key;
	Value value;
} Item;
-> 하나의 데이터 조각

---

typedef struct {
	bool success; // true : 성공, false : 실패
	Item item;
	//필드 추가 가능
} Reply;
-> 어떤 함수가 성공했는지 그리고 어떤 값을 리턴했는지

---

typedef struct node_t {
	Item item;
	struct node_t* next;
	//필드 추가 가능
} Node;
-> Node 구조체 정의 연결리스트...구조인 듯?

Item item
-> 노드에 들어있는 실제 데이터
struct node_t* next;
-> 다음 노드를 가리키는 포인터.

---

typedef struct {
	Node* head, * tail;
	//필드 추가 가능
} Queue;
-> 내가 아는 그 큐인듯
-> 연결리스트 기반

//자료형 정의, 추가/수정 가능


--------------------------------------------------


3. queue.h 헤드파일 하나하나 이해해보자
과제에서 구현해야 할 기능 목차 역할인것 같다

// 큐 초기화, 해제
init(void); / release(Queue* queue);

// 노드 관련 함수들
nalloc(Item item);
-> 아이템 받아서 새 노드 만들기
nfree(Node* node);
-> 노드 하나만 메모리 해제
nclone(Node* node);
-> 기존 노드 내용 복사 생성

// 인큐 디큐
Reply enqueue(Queue* queue, Item item);
Reply dequeue(Queue* queue);
-> key가 클수록 우선순위...

// 범위 추출? 솔직히 할 수 있을지 모르겟음
Queue* range(Queue* queue, Key start, Key end);


--------------------------------------------------


✔️ init() 구현
큐를 비어있는 상태로 만들어 줬다! nullptr로.